####################################################################################################
# FINAL_SETTLEMENT_SYSTEM.PY (저장00 - 최종 수정본)
# 작성일: 2025-02-13
#
# [설명]
# - 로그인 후 자동화 버튼 클릭 시 추가 비밀번호("0011")를 입력하면,
#   ① 엑셀 파일(보고서)이 생성되어 열리고 대기한 후,
#   ② 지정 URL(https://m.stock.naver.com/domestic/index/KOSDAQ/total)이 완전히 로딩되면,
#       최대 30행의 tr/td 정보를 추출하여 엑셀의 A2, B2부터 저장하고,
#   ③ 각 행에 대해 X열(예: 24번째 열)에 "=A{i}=B{i}" 수식을 입력하여 TRUE/FALSE 값을 확인한 후,
#       TRUE가 발견되면 해당 행의 추출된 URL 정보를 기반으로 YouTube(https://www.youtube.com/)를 실행합니다.
# - 이 작업은 프로그램이 off 될 때까지 15초 간격으로 반복됩니다.
#
# - 로그인 정보: 아이디 "EXTA", 비밀번호 "papa"
# - 박스1: 4개 버튼("개인장", "VECT PAY", "WING GLOBAL", "PUSHBULLET") – 각 버튼은 추가 비밀번호("0011")
#   확인 후 ON되며, ON 클릭 시 ExcelUpdaterThread를 시작합니다.
#
# - 박스2: 2열 레이아웃 – 좌측에 "B.C", "합계", "정산 결과"(모두 160×35), 우측에 "VECT PAY", "WING PAY",
#   "개인장", "LEVEL 장" 자동 업데이트 필드와 각각 "수정"/"전송" 버튼(하얀색, 폰트 11pt)
#
# - 블랙 리스트 엑셀 파일 경로: /Users/wxxd00420/Desktop/Fluxo de Caixa - HIDE OPEN AIR - DEZ2024.xlsx
#
# - 하단에는 로그인 유저명, 현재 시간, "저장하기" 버튼이 배치되어 Excel 보고서를 생성 및 오픈합니다.
#
# - 전체 GUI 글꼴은 "맑은 고딕", 메인 창은 리사이즈 가능.
#
# - 프로그램 종료 시 모든 Selenium 드라이버와 스레드가 안전하게 종료됩니다.
####################################################################################################

import sys, os, time, re, atexit, subprocess
from datetime import datetime
import openpyxl

from PyQt5.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QLineEdit, QPushButton, QLabel,
    QMainWindow, QMessageBox, QHBoxLayout, QStackedWidget, QGroupBox, QGridLayout,
    QGraphicsOpacityEffect, QCheckBox, QTableWidget, QTableWidgetItem, QInputDialog
)
from PyQt5.QtCore import Qt, QTimer, QPropertyAnimation, pyqtSignal, QObject, QThread, QUrl
from PyQt5.QtGui import QGuiApplication, QDesktopServices
from PyQt5.QtWebEngineWidgets import QWebEngineView

# 전역 글꼴: 맑은 고딕
global_font = "font-family: 'Malgun Gothic', sans-serif;"

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager

####################################################################################################
# Chrome 드라이버 생성 helper 함수 (재시도)
####################################################################################################
def create_chrome_driver(options, retries=3):
    for i in range(retries):
        try:
            driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
            return driver
        except Exception as e:
            print(f"Chrome 드라이버 초기화 오류 (시도 {i+1}/{retries}): {e}")
            time.sleep(2)
    return None

# 기본 크롤링용 headless 옵션 (데이터 추출 시 사용)
default_options = webdriver.ChromeOptions()
default_options.add_argument("--headless")
default_options.add_argument("--disable-gpu")

# 자동화(Excel 업데이트 및 입금승인) 시에는 실제 브라우저 창이 보이도록 headless 해제
non_headless_options = webdriver.ChromeOptions()
# (headless 옵션 미설정 → 실제 브라우저 창 보임)

####################################################################################################
# Copyable 위젯 클래스 (클릭 시 텍스트 복사)
####################################################################################################
class CopyableLineEdit(QLineEdit):
    def mousePressEvent(self, event):
        QGuiApplication.clipboard().setText(self.text())
        super().mousePressEvent(event)

class CopyableLabel(QLabel):
    def mousePressEvent(self, event):
        QGuiApplication.clipboard().setText(self.text())
        super().mousePressEvent(event)

####################################################################################################
# 숫자 포맷 함수
####################################################################################################
def format_number(value):
    try:
        num = float(value.replace(",", "").strip())
        return f"{num:,.0f}"
    except Exception as e:
        return value

####################################################################################################
# PriceFetcherWorker: 지정 URL의 XPath 데이터를 크롤링 (headless 사용)
####################################################################################################
class PriceFetcherWorker(QObject):
    price_updated = pyqtSignal(str)
    def __init__(self, xpath, url="https://m.stock.naver.com/domestic/index/KOSDAQ/total", options=default_options):
        super().__init__()
        self.xpath = xpath
        self.url = url
        self.running = True
        self.driver = create_chrome_driver(options)
        if self.driver is None:
            print("드라이버 초기화 실패.")
            self.running = False
    def run(self):
        if not self.running or self.driver is None:
            return
        while self.running:
            try:
                self.driver.get(self.url)
                time.sleep(2)
                element = self.driver.find_element(By.XPATH, self.xpath)
                text = element.text.strip()
                numeric = re.sub(r"[^\d\.]", "", text)
                if numeric == "":
                    numeric = "0"
                self.price_updated.emit(numeric)
            except Exception as e:
                print("크롤링 오류:", e)
                self.price_updated.emit("Error")
            time.sleep(10)
    def stop(self):
        self.running = False
        if self.driver:
            try:
                self.driver.quit()
            except Exception as e:
                print("드라이버 종료 오류:", e)

####################################################################################################
# 입금승인완료 기능
# - Excel의 X열(예: 24번째 셀)에서 TRUE가 확인되면, 해당 행의 B열 값을 이용하여 지정 URL(YouTube)을 실행.
####################################################################################################
def 입금승인완료(b_value):
    driver = create_chrome_driver(non_headless_options)
    if driver is None:
        print("입금승인완료: 드라이버 초기화 실패")
        return
    target_url = "https://www.youtube.com/shorts/45_fCr8zhNI?query=" + b_value
    driver.get(target_url)
    time.sleep(2)
    try:
        element = driver.find_element(By.XPATH, "/html/body/div/button")  # 실제 환경에 맞게 수정 필요
        element.click()
        print("입금승인완료: 클릭 성공")
    except Exception as e:
        print("입금승인완료 오류:", e)
    driver.quit()

####################################################################################################
# ExcelUpdaterThread: 15초마다 지정 URL의 테이블 데이터를 최대 30행까지 추출하여 Excel에 저장
# 각 행에 대해 A열과 B열의 데이터를 비교하여, 동일하면 X열에 TRUE가 되도록 수식을 기입(여기서는 직접 비교)
# TRUE가 발견되면 해당 행의 URL(예: A열의 값)을 이용해 YouTube URL을 실행하도록 함.
####################################################################################################
class ExcelUpdaterThread(QThread):
    def __init__(self, on_time, parent=None):
        super().__init__(parent)
        self.on_time = on_time
        self.running = True
        self.export_filepath = None
    def run(self):
        wb = openpyxl.Workbook()
        sheet_name = "배컨 처리현황" + datetime.now().strftime("%Y%m%d")
        ws = wb.active
        ws.title = sheet_name
        headers = ["처리현황", "", "아이디", "이름", "납입타입", "금액", "신청시간",
                   "벡트페이 동일 이름 2분 차이 동일 금액", "벡트 페이 이름 총 금액",
                   "윙글로벌 동일 이름 2분차이 동일금액", "푸쉬불렛", "푸쉬블랙 합계금액", "배컨 합계금액"]
        ws.append(headers)
        desktop = os.path.join(os.path.expanduser("~"), "Desktop")
        filename = f"정산보고서_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
        self.export_filepath = os.path.join(desktop, filename)
        wb.save(self.export_filepath)
        file_ctime = os.path.getctime(self.export_filepath)
        if abs(file_ctime - self.on_time) > 5:
            print("Excel 제작시간과 ON 클릭 시간이 일치하지 않음. 업데이트 시작 안함.")
            return
        while self.running:
            time.sleep(5)  # 엑셀이 완전히 열릴 때까지 대기
            # URL 로딩 대기 (실제 브라우저로 진행)
            driver = create_chrome_driver(non_headless_options)
            if driver is None:
                print("ExcelUpdater: 드라이버 초기화 실패")
                continue
            driver.get("https://m.stock.naver.com/domestic/index/KOSDAQ/total")
            try:
                WebDriverWait(driver, 20).until(
                    EC.presence_of_element_located((By.XPATH, "/html/body/div[1]/div[1]/div[2]/div/div/div[13]/div[2]/table/tbody/tr[1]/td[2]/span/em"))
                )
                print("URL 로딩 완료 (ExcelUpdater)")
            except Exception as e:
                print("URL 로딩 대기 오류:", e)
            # 최대 30행의 데이터 추출
            a_elements = driver.find_elements(By.XPATH, "/html/body/div[1]/div[1]/div[2]/div/div/div[13]/div[2]/table/tbody/tr/td[1]/span[1]")
            b_elements = driver.find_elements(By.XPATH, "/html/body/div[1]/div[1]/div[2]/div/div/div[13]/div[2]/table/tbody/tr/td[2]")
            driver.quit()
            a_data = [elem.text for elem in a_elements][:30]
            b_data = [elem.text for elem in b_elements][:30]
            # 기존 데이터 영역(행2 이후)을 삭제 후 새로 입력
            if ws.max_row > 1:
                ws.delete_rows(2, ws.max_row - 1)
            for i in range(len(a_data)):
                row_index = i + 2
                ws.cell(row=row_index, column=1, value=a_data[i])
                ws.cell(row=row_index, column=2, value=b_data[i])
                # 수식 기입 대신, openpyxl은 수식 계산을 지원하지 않으므로 직접 비교하여 TRUE/FALSE 문자열 입력
                if a_data[i] == b_data[i]:
                    ws.cell(row=row_index, column=24, value="TRUE")
                else:
                    ws.cell(row=row_index, column=24, value="FALSE")
            wb.save(self.export_filepath)
            # X열(24번째 열) 검사: 만약 TRUE가 있으면 해당 행의 A열 값을 이용하여 YouTube URL 실행
            for i in range(len(a_data)):
                row_index = i + 2
                cell_value = ws.cell(row=row_index, column=24).value
                if cell_value is not None and str(cell_value).upper() == "TRUE":
                    b_value = ws.cell(row=row_index, column=2).value
                    if b_value:
                        print(f"Row {row_index} TRUE 발견. 입금승인완료 실행 (B열 값: {b_value})")
                        입금승인완료(str(b_value))
                        break  # 한 번 실행 후 바로 중단 (원하는 로직에 맞게 수정 가능)
            time.sleep(7)
    def stop(self):
        self.running = False

####################################################################################################
# BlackListWidget: 블랙 리스트 조회
# - 엑셀 파일 경로: /Users/wxxd00420/Desktop/Fluxo de Caixa - HIDE OPEN AIR - DEZ2024.xlsx
####################################################################################################
class BlackListWidget(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.blink_timer = QTimer(self)
        self.blink_state = False
        self.setup_ui()
        self.load_excel()
    def setup_ui(self):
        layout = QVBoxLayout(self)
        layout.setSpacing(10)
        search_layout = QHBoxLayout()
        label = QLabel("블랙 리스트 조회")
        label.setStyleSheet(global_font + "font-size: 12pt; color: #E0E0E0; background-color: #2c2c2c;")
        search_layout.addWidget(label)
        self.search_edit = QLineEdit()
        self.search_edit.setPlaceholderText("신원정보 검색")
        self.search_edit.setStyleSheet(global_font + "font-size: 12pt; color: #FFFFFF; background-color: #1a1a1a;")
        self.search_edit.textChanged.connect(self.perform_search)
        search_layout.addWidget(self.search_edit)
        layout.addLayout(search_layout)
        self.table = QTableWidget()
        self.table.setStyleSheet(global_font + "font-size: 12pt; color: #E0E0E0; background-color: #1a1a1a;")
        layout.addWidget(self.table)
        self.blink_label = CopyableLabel("")
        self.blink_label.setStyleSheet(global_font + "font-size: 14pt; font-weight: bold; color: red; background-color: #2c2c2c;")
        self.blink_label.setVisible(False)
        layout.addWidget(self.blink_label)
    def load_excel(self):
        try:
            self.workbook = openpyxl.load_workbook("/Users/wxxd00420/Desktop/Fluxo de Caixa - HIDE OPEN AIR - DEZ2024.xlsx")
            self.sheet = self.workbook.active
        except Exception as e:
            print("엑셀 로드 오류:", e)
            self.workbook = None
            self.sheet = None
    def perform_search(self):
        query = self.search_edit.text().strip().lower()
        if self.sheet is None:
            return
        results = []
        for row in self.sheet.iter_rows(values_only=True):
            if row[0] is None:
                continue
            row_data = [str(cell) if cell is not None else "" for cell in row]
            if query == "" or any(query in cell.lower() for cell in row_data):
                results.append(row_data)
        if results:
            num_rows = len(results)
            num_cols = max(len(r) for r in results)
            self.table.setRowCount(num_rows)
            self.table.setColumnCount(num_cols)
            self.table.setHorizontalHeaderLabels(results[0])
            for i, row in enumerate(results):
                for j, cell in enumerate(row):
                    text = cell[:30]
                    item = QTableWidgetItem(text)
                    self.table.setItem(i, j, item)
            self.start_blink()
        else:
            self.table.setRowCount(1)
            self.table.setColumnCount(1)
            item = QTableWidgetItem("블랙 없음")
            item.setForeground(Qt.green)
            font = item.font()
            font.setBold(True)
            font.setPointSize(14)
            item.setFont(font)
            self.table.setItem(0, 0, item)
            self.stop_blink()
    def start_blink(self):
        self.blink_label.setText("정보 일치")
        self.blink_label.setVisible(True)
        self.blink_timer.timeout.connect(self.toggle_blink)
        self.blink_timer.start(1000)
    def stop_blink(self):
        self.blink_timer.stop()
        self.blink_label.setVisible(False)
    def toggle_blink(self):
        if self.blink_state:
            self.blink_label.setStyleSheet(global_font + "font-size: 14pt; font-weight: bold; color: white; background-color: #2c2c2c;")
        else:
            self.blink_label.setStyleSheet(global_font + "font-size: 14pt; font-weight: bold; color: red; background-color: #2c2c2c;")
        self.blink_state = not self.blink_state

####################################################################################################
# LoginWidget: 로그인 화면 (작게 디자인)
####################################################################################################
class LoginWidget(QWidget):
    login_success = pyqtSignal(str)
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setup_ui()
    def setup_ui(self):
        self.resize(400, 300)
        layout = QVBoxLayout(self)
        layout.setSpacing(20)
        layout.setAlignment(Qt.AlignCenter)
        self.username_edit = QLineEdit()
        self.username_edit.setPlaceholderText("아이디")
        self.username_edit.setFixedSize(120, 30)
        self.username_edit.setText("EXTA")
        self.username_edit.setStyleSheet(global_font + "font-size: 10pt; color: #FFFFFF; background-color: #1a1a1a; border: none;")
        self.password_edit = QLineEdit()
        self.password_edit.setPlaceholderText("비밀번호")
        self.password_edit.setEchoMode(QLineEdit.Password)
        self.password_edit.setFixedSize(120, 30)
        self.password_edit.setText("papa")
        self.password_edit.setStyleSheet(global_font + "font-size: 10pt; color: #FFFFFF; background-color: #1a1a1a; border: none;")
        self.login_button = QPushButton("로그인")
        self.login_button.clicked.connect(self.handle_login)
        self.login_button.setFixedSize(120, 30)
        self.login_button.setStyleSheet(global_font + "background-color: #0078d7; border: none; border-radius: 5px; font-size: 10pt; color: #FFFFFF;")
        self.success_label = QLabel("로그인 성공")
        self.success_label.setAlignment(Qt.AlignCenter)
        self.success_label.setStyleSheet(global_font + "color: #00FF00; font-size: 12pt; background-color: #1a1a1a;")
        self.success_label.setVisible(False)
        self.success_label.setTextInteractionFlags(Qt.TextSelectableByMouse)
        layout.addWidget(self.username_edit, alignment=Qt.AlignCenter)
        layout.addWidget(self.password_edit, alignment=Qt.AlignCenter)
        layout.addWidget(self.login_button, alignment=Qt.AlignCenter)
        layout.addWidget(self.success_label, alignment=Qt.AlignCenter)
    def handle_login(self):
        if self.username_edit.text().strip() == "EXTA" and self.password_edit.text().strip() == "papa":
            self.show_success_message()
        else:
            QMessageBox.warning(self, "오류", "아이디 또는 비밀번호가 올바르지 않습니다.")
    def show_success_message(self):
        self.success_label.setVisible(True)
        self.success_label.setGraphicsEffect(None)
        QTimer.singleShot(2000, self.fade_out_success_message)
    def fade_out_success_message(self):
        effect = QGraphicsOpacityEffect(self.success_label)
        self.success_label.setGraphicsEffect(effect)
        self.anim = QPropertyAnimation(effect, b"opacity")
        self.anim.setDuration(1000)
        self.anim.setStartValue(1)
        self.anim.setEndValue(0)
        self.anim.finished.connect(self.on_fade_finished)
        self.anim.start()
    def on_fade_finished(self):
        self.login_success.emit("EXTA")

####################################################################################################
# MainInterfaceWidget: 메인 화면
# - 자동화 버튼 클릭 시, 비밀번호("0011") 확인 후 ON되면,
#   ① 엑셀 파일(보고서)이 생성되어 열리고 대기,
#   ② URL이 완전히 로딩될 때까지 대기 후, 최대 30행의 tr/td 정보를 추출하여 엑셀에 저장,
#   ③ 각 행에 대해 A열과 B열의 값을 비교하여 X열에 수식(여기서는 직접 TRUE/FALSE 문자열 입력)을 기록,
#   ④ TRUE가 발견되면 해당 행의 B열 값을 이용하여 YouTube URL 실행,
#   ⑤ 이 작업을 프로그램 종료 시까지 15초 간격으로 반복합니다.
####################################################################################################
class MainInterfaceWidget(QWidget):
    def __init__(self, login_id, parent=None):
        super().__init__(parent)
        self.login_id = login_id
        self.btn1_state = self.btn2_state = self.btn3_state = self.btn4_state = False
        self.box1_button_on = self.button_on = "background-color: #D3D3D3; border: none; border-radius: 5px; font-size: 12pt; color: black;"
        self.box1_button_off = self.button_off = "background-color: #D3D3D3; border: none; border-radius: 5px; font-size: 12pt; color: black;"
        self.box2_button_on = "background-color: white; border: none; border-radius: 5px; font-size: 11pt; color: black;"
        self.box2_button_off = "background-color: white; border: none; border-radius: 5px; font-size: 11pt; color: black;"
        self.automation_on_time = None
        self.excel_thread = None
        self.setup_ui()
        self.start_timer()
        QTimer.singleShot(10000, self.start_price_fetchers)
        self.bet_value1 = ""
        self.bet_value2 = ""
    def verify_password(self):
        pwd, ok = QInputDialog.getText(self, "비밀번호 확인", "비밀번호를 입력하세요:", QLineEdit.Password)
        if ok and pwd == "0011":
            return True
        else:
            QMessageBox.warning(self, "오류", "비밀번호가 올바르지 않습니다.")
            return False
    def open_excel_file(self):
        if self.excel_thread is not None:
            filepath = self.excel_thread.export_filepath
            if filepath:
                QDesktopServices.openUrl(QUrl.fromLocalFile(filepath))
    def setup_ui(self):
        self.resize(900, 850)
        main_layout = QVBoxLayout(self)
        main_layout.setSpacing(int(20 * 1.3))
        main_layout.setContentsMargins(20, 20, 20, 20)
        ############## 박스 1: 자동 입금처리 시스템 ##############
        box1 = QGroupBox()
        box1.setStyleSheet(global_font + "background-color: #2c2c2c; border: none; border-radius: 10px;")
        title1 = CopyableLabel("자동 입금처리 시스템")
        title1.setAlignment(Qt.AlignCenter)
        title1.setStyleSheet(global_font + "font-size: 18pt; font-weight: bold; color: white; background-color: #2c2c2c;")
        box1_layout = QVBoxLayout()
        box1_layout.addWidget(title1)
        self.mismatch_label = CopyableLabel("")
        self.mismatch_label.setAlignment(Qt.AlignCenter)
        self.mismatch_label.setStyleSheet(global_font + "font-size: 14pt; color: yellow; background-color: #2c2c2c;")
        btns_layout = QHBoxLayout()
        btns_layout.addStretch()
        btn_texts = ["개인장", "VECT PAY", "WING GLOBAL", "PUSHBULLET"]
        self.btns = []
        self.btn_statuses = []
        for text in btn_texts:
            vbox = QVBoxLayout()
            btn = QPushButton(text)
            btn.setFixedSize(120, 50)
            btn.setStyleSheet(self.box1_button_off)
            btn.clicked.connect(lambda _, b=btn: self.toggle_button_wrapper(b))
            vbox.addWidget(btn, alignment=Qt.AlignCenter)
            status_label = CopyableLabel("OFF")
            status_label.setAlignment(Qt.AlignCenter)
            status_label.setStyleSheet(global_font + "font-size: 12pt; color: red; background-color: #2c2c2c;")
            vbox.addWidget(status_label, alignment=Qt.AlignCenter)
            btns_layout.addLayout(vbox)
            btns_layout.addSpacing(20)
            self.btns.append(btn)
            self.btn_statuses.append(status_label)
        btns_layout.addStretch()
        box1_layout.addLayout(btns_layout)
        box1_layout.addWidget(self.mismatch_label)
        auto_layout = QHBoxLayout()
        auto_layout.addStretch()
        self.all_auto_chk = QCheckBox("전체 자동화")
        self.all_auto_chk.setFixedSize(120, 40)
        self.all_auto_chk.setStyleSheet(global_font + "background-color: #2c2c2c; font-size: 12pt; color: white;")
        self.all_auto_chk.stateChanged.connect(self.set_all_buttons_on_wrapper)
        auto_layout.addWidget(self.all_auto_chk)
        auto_layout.addStretch()
        box1_layout.addLayout(auto_layout)
        box1.setLayout(box1_layout)
        main_layout.addWidget(box1)
        ############## 박스 2: 자동정산 시스템 ##############
        box2 = QGroupBox()
        box2.setStyleSheet(global_font + "background-color: #2c2c2c; border: none; border-radius: 10px;")
        title2 = CopyableLabel("자동 정산 시스템")
        title2.setAlignment(Qt.AlignCenter)
        title2.setStyleSheet(global_font + "font-size: 19pt; font-weight: bold; color: white;")
        box2_layout = QVBoxLayout()
        box2_layout.addWidget(title2)
        grid = QGridLayout()
        grid.setSpacing(13)
        # 좌측 그룹: B.C, 합계, 정산 결과 (모두 160×35)
        grid.addWidget(QLabel("B.C"), 0, 0)
        self.betting_price_edit = CopyableLineEdit()
        self.betting_price_edit.setReadOnly(True)
        self.betting_price_edit.setPlaceholderText("자동 업데이트")
        self.betting_price_edit.setFixedSize(160, 35)
        self.betting_price_edit.setAlignment(Qt.AlignCenter)
        self.betting_price_edit.setStyleSheet(global_font + "font-size: 11pt; color: #FFFFFF; background-color: #1a1a1a;")
        grid.addWidget(self.betting_price_edit, 0, 1)
        self.betting_otp_edit = QLineEdit()
        self.betting_otp_edit.setMaxLength(6)
        self.betting_otp_edit.setFixedSize(70, 35)
        self.betting_otp_edit.setAlignment(Qt.AlignCenter)
        self.betting_otp_edit.setStyleSheet(global_font + "font-size: 11pt; color: #FFFFFF; background-color: #1a1a1a;")
        grid.addWidget(self.betting_otp_edit, 0, 2)
        self.betting_otp_btn = QPushButton("전송")
        self.betting_otp_btn.setFixedSize(70, 30)
        self.betting_otp_btn.setStyleSheet(global_font + """
            QPushButton { background-color: white; border: none; border-radius: 5px; font-size: 11pt; color: black; }
            QPushButton:hover { background-color: #A9A9A9; }
        """)
        self.betting_otp_btn.clicked.connect(lambda: print("B.C 전송:", self.betting_otp_edit.text()))
        grid.addWidget(self.betting_otp_btn, 0, 3)
        grid.addWidget(QLabel("합계"), 1, 0)
        self.total_edit = CopyableLineEdit()
        self.total_edit.setReadOnly(True)
        self.total_edit.setText("0")
        self.total_edit.setFixedSize(160, 35)
        self.total_edit.setAlignment(Qt.AlignCenter)
        self.total_edit.setStyleSheet(global_font + "font-size: 11pt; color: #FFFFFF; background-color: #1a1a1a;")
        grid.addWidget(self.total_edit, 1, 1)
        grid.addWidget(QLabel("정산 결과"), 2, 0)
        self.result_edit = CopyableLineEdit()
        self.result_edit.setReadOnly(True)
        self.result_edit.setText("0")
        self.result_edit.setFixedSize(160, 35)
        self.result_edit.setAlignment(Qt.AlignCenter)
        self.result_edit.setStyleSheet(global_font + "font-size: 11pt; color: #FFFFFF; background-color: #1a1a1a;")
        grid.addWidget(self.result_edit, 2, 1)
        self.alert_label = CopyableLabel("")
        self.alert_label.setAlignment(Qt.AlignCenter)
        self.alert_label.setStyleSheet(global_font + "font-size: 12pt; color: white; background-color: #2c2c2c;")
        grid.addWidget(self.alert_label, 3, 0, 1, 4)
        # 우측 그룹: VECT PAY, WING PAY, 개인장, LEVEL 장 (모두 160×35 자동 업데이트 필드)
        labels_right = ["VECT PAY", "WING PAY", "개인장", "LEVEL 장"]
        for i, text in enumerate(labels_right):
            grid.addWidget(QLabel(text), i, 4)
            auto_edit = CopyableLineEdit()
            auto_edit.setReadOnly(True)
            auto_edit.setPlaceholderText("자동 업데이트")
            auto_edit.setFixedSize(160, 35)
            auto_edit.setAlignment(Qt.AlignCenter)
            auto_edit.setStyleSheet(global_font + "font-size: 11pt; color: #FFFFFF; background-color: #1a1a1a;")
            grid.addWidget(auto_edit, i, 5)
            mod_btn = QPushButton("수정")
            mod_btn.setFixedSize(50, 25)
            mod_btn.setStyleSheet(global_font + """
                QPushButton { background-color: white; border: none; border-radius: 5px; font-size: 11pt; color: black; }
                QPushButton:hover { background-color: #A9A9A9; }
            """)
            mod_btn.clicked.connect(lambda _, le=auto_edit: self.toggle_manual(le))
            grid.addWidget(mod_btn, i, 6)
            otp_edit = QLineEdit()
            otp_edit.setMaxLength(6)
            otp_edit.setFixedSize(60, 30)
            otp_edit.setAlignment(Qt.AlignCenter)
            otp_edit.setStyleSheet(global_font + "font-size: 11pt; color: #FFFFFF; background-color: #1a1a1a;")
            grid.addWidget(otp_edit, i, 7)
            send_btn = QPushButton("전송")
            send_btn.setFixedSize(50, 25)
            send_btn.setStyleSheet(global_font + """
                QPushButton { background-color: white; border: none; border-radius: 5px; font-size: 11pt; color: black; }
                QPushButton:hover { background-color: #A9A9A9; }
            """)
            send_btn.clicked.connect(lambda _, oe=otp_edit, t=text: print(f"{t} 전송:", oe.text()))
            grid.addWidget(send_btn, i, 8)
            if text == "VECT PAY":
                self.vectpay_edit = auto_edit
            elif text == "WING PAY":
                self.wingpay_edit = auto_edit
            elif text == "개인장":
                self.geinjang_edit = auto_edit
            elif text == "LEVEL 장":
                self.level_auto_edit = auto_edit
        box2_layout.addLayout(grid)
        box2.setLayout(box2_layout)
        main_layout.addWidget(box2)
        ############## 박스 3: 블랙 리스트 ##############
        box3 = QGroupBox("")
        box3.setStyleSheet(global_font + "background-color: #2c2c2c; border: none; border-radius: 10px;")
        box3_layout = QVBoxLayout()
        title3 = CopyableLabel("블랙 리스트")
        title3.setAlignment(Qt.AlignCenter)
        title3.setStyleSheet(global_font + "font-size: 18pt; font-weight: bold; color: white;")
        box3_layout.addWidget(title3)
        self.blacklist_widget = BlackListWidget()
        box3_layout.addWidget(self.blacklist_widget)
        box3.setLayout(box3_layout)
        main_layout.addWidget(box3)
        ############## 하단 영역 ##############
        bottom_layout = QHBoxLayout()
        bottom_layout.addStretch()
        self.bottom_info = CopyableLabel(f"사용자: {self.login_id}    {time.strftime('%Y-%m-%d %H:%M:%S', time.localtime())}")
        self.bottom_info.setStyleSheet(global_font + "font-size: 12pt; color: #E0E0E0; background-color: #1e1e1e;")
        bottom_layout.addWidget(self.bottom_info)
        self.bottom_save_btn = QPushButton("저장하기")
        self.bottom_save_btn.setFixedSize(50, 25)
        self.bottom_save_btn.setStyleSheet(global_font + "background-color: white; border: none; border-radius: 5px; font-size: 11pt; color: black;")
        self.bottom_save_btn.clicked.connect(self.open_excel_file)
        bottom_layout.addWidget(self.bottom_save_btn, alignment=Qt.AlignRight)
        bottom_layout.addStretch()
        main_layout.addLayout(bottom_layout)
    def toggle_manual(self, line_edit):
        if line_edit.isReadOnly():
            line_edit.setReadOnly(False)
            line_edit.setStyleSheet(global_font + "font-size: 11pt; color: #FFFFFF; background-color: #444; border: none; border-radius: 5px;")
        else:
            line_edit.setReadOnly(True)
            line_edit.setStyleSheet(global_font + "font-size: 11pt; color: #FFFFFF; background-color: transparent; border: none; border-radius: 5px;")
        self.modify_betting_settlement()
    def toggle_button_wrapper(self, btn):
        if not self.verify_password():
            return
        self.toggle_button_impl(btn)
        self.open_excel_file()  # 엑셀을 열고
        self.automation_on_time = time.time()  # 자동화 ON 클릭 시간 기록
        self.bet_value1 = self.betting_price_edit.text()
        if int(time.strftime("%S")) % 2 == 0:
            self.bet_value2 = self.bet_value1
        else:
            self.bet_value2 = "0"
        self.compare_bet_values()
        if self.excel_thread is None:
            self.excel_thread = ExcelUpdaterThread(self.automation_on_time)
            self.excel_thread.export_filepath = None
            self.excel_thread.start()
    def toggle_button_impl(self, sender):
        idx = self.btns.index(sender)
        if idx == 0:
            self.btn1_state = not self.btn1_state
            sender.setStyleSheet(self.box1_button_on if self.btn1_state else self.box1_button_off)
            self.btn_statuses[0].setText("ON" if self.btn1_state else "OFF")
            self.btn_statuses[0].setStyleSheet(global_font + ("font-size: 12pt; color: green;" if self.btn1_state else "font-size: 12pt; color: red;"))
        elif idx == 1:
            self.btn2_state = not self.btn2_state
            sender.setStyleSheet(self.box1_button_on if self.btn2_state else self.box1_button_off)
            self.btn_statuses[1].setText("ON" if self.btn2_state else "OFF")
            self.btn_statuses[1].setStyleSheet(global_font + ("font-size: 12pt; color: green;" if self.btn2_state else "font-size: 12pt; color: red;"))
        elif idx == 2:
            self.btn3_state = not self.btn3_state
            sender.setStyleSheet(self.box1_button_on if self.btn3_state else self.box1_button_off)
            self.btn_statuses[2].setText("ON" if self.btn3_state else "OFF")
            self.btn_statuses[2].setStyleSheet(global_font + ("font-size: 12pt; color: green;" if self.btn3_state else "font-size: 12pt; color: red;"))
        elif idx == 3:
            self.btn4_state = not self.btn4_state
            sender.setStyleSheet(self.box1_button_on if self.btn4_state else self.box1_button_off)
            self.btn_statuses[3].setText("ON" if self.btn4_state else "OFF")
            self.btn_statuses[3].setStyleSheet(global_font + ("font-size: 12pt; color: green;" if self.btn4_state else "font-size: 12pt; color: red;"))
        print("버튼 상태:", [s.text() for s in self.btn_statuses])
    def set_all_buttons_on_wrapper(self):
        if self.all_auto_chk.isChecked():
            if not self.verify_password():
                self.all_auto_chk.setChecked(False)
                return
            for btn in self.btns:
                btn.setStyleSheet(self.box1_button_on)
            self.btn1_state = self.btn2_state = self.btn3_state = self.btn4_state = True
            for s in self.btn_statuses:
                s.setText("ON")
                s.setStyleSheet(global_font + "font-size: 12pt; color: green;")
            self.open_excel_file()
        else:
            for btn in self.btns:
                btn.setStyleSheet(self.box1_button_off)
            self.btn1_state = self.btn2_state = self.btn3_state = self.btn4_state = False
            for s in self.btn_statuses:
                s.setText("OFF")
                s.setStyleSheet(global_font + "font-size: 12pt; color: red;")
    def start_timer(self):
        self.timer = QTimer(self)
        self.timer.timeout.connect(self.update_time)
        self.timer.start(1000)
        self.update_time()
    def update_time(self):
        current_time = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
        info_text = f"사용자: {self.login_id}    {current_time}"
        self.bottom_info.setText(info_text)
    def start_price_fetchers(self):
        try:
            self.bet_worker = PriceFetcherWorker("/html/body/div[1]/div[1]/div[2]/div/div/div[13]/div[2]/table/tbody/tr[1]/td[2]/span/em")
            self.vect_worker = PriceFetcherWorker("/html/body/div[1]/div[1]/div[2]/div/div/div[13]/div[2]/table/tbody/tr[2]/td[2]/span/em")
            self.wing_worker = PriceFetcherWorker("/html/body/div[1]/div[1]/div[2]/div/div/div[13]/div[2]/table/tbody/tr[3]/td[2]/span/em")
            self.gein_worker = PriceFetcherWorker("/html/body/div[1]/div[1]/div[2]/div/div/div[13]/div[2]/table/tbody/tr[4]/td[2]/span/em")
            self.level_worker = PriceFetcherWorker("/html/body/div[1]/div[1]/div[2]/div/div/div[13]/div[2]/table/tbody/tr[5]/td[2]/span/em")
        except Exception as e:
            print("크롤러 초기화 오류:", e)
            return
        self.bet_thread = QThread()
        self.vect_thread = QThread()
        self.wing_thread = QThread()
        self.gein_thread = QThread()
        self.level_thread = QThread()
        self.bet_worker.moveToThread(self.bet_thread)
        self.vect_worker.moveToThread(self.vect_thread)
        self.wing_worker.moveToThread(self.wing_thread)
        self.gein_worker.moveToThread(self.gein_thread)
        self.level_worker.moveToThread(self.level_thread)
        self.bet_thread.started.connect(self.bet_worker.run)
        self.vect_thread.started.connect(self.vect_worker.run)
        self.wing_thread.started.connect(self.wing_worker.run)
        self.gein_thread.started.connect(self.gein_worker.run)
        self.level_thread.started.connect(self.level_worker.run)
        self.bet_worker.price_updated.connect(self.update_betting_value)
        self.vect_worker.price_updated.connect(self.update_vect_value)
        self.wing_worker.price_updated.connect(self.update_wing_value)
        self.gein_worker.price_updated.connect(self.update_gein_value)
        self.level_worker.price_updated.connect(self.update_level_value)
        self.bet_thread.start()
        self.vect_thread.start()
        self.wing_thread.start()
        self.gein_thread.start()
        self.level_thread.start()
    def update_betting_value(self, value):
        try:
            self.betting_price_edit.setText(format_number(value))
            self.bet_value1 = format_number(value)
            self.compare_bet_values()
            self.modify_betting_settlement()
            print(f"B.C 업데이트: {value}")
        except Exception as e:
            print("B.C 업데이트 오류:", e)
    def update_vect_value(self, value):
        try:
            if self.vectpay_edit.isReadOnly():
                self.vectpay_edit.setText(format_number(value))
                self.modify_betting_settlement()
                print(f"VECT PAY 업데이트: {value}")
        except Exception as e:
            print("VECT PAY 업데이트 오류:", e)
    def update_wing_value(self, value):
        try:
            if self.wingpay_edit.isReadOnly():
                self.wingpay_edit.setText(format_number(value))
                self.modify_betting_settlement()
                print(f"WING PAY 업데이트: {value}")
        except Exception as e:
            print("WING PAY 업데이트 오류:", e)
    def update_gein_value(self, value):
        try:
            if self.geinjang_edit.isReadOnly():
                self.geinjang_edit.setText(format_number(value))
                self.modify_betting_settlement()
                print(f"개인장 업데이트: {value}")
        except Exception as e:
            print("개인장 업데이트 오류:", e)
    def update_level_value(self, value):
        try:
            if self.level_auto_edit.isReadOnly():
                self.level_auto_edit.setText(format_number(value))
                self.modify_betting_settlement()
                print(f"LEVEL 장 업데이트: {value}")
        except Exception as e:
            print("LEVEL 장 업데이트 오류:", e)
    def compare_bet_values(self):
        if self.bet_value1 == self.bet_value2:
            print("정보 일치, 클릭 실행")
            self.mismatch_label.setText("")
        else:
            self.mismatch_label.setText("불일치: 홍길동 - 123,456")
    def modify_betting_settlement(self):
        def parse_value(text):
            m = re.findall(r"[\d\.]+", text.replace(",", ""))
            if m:
                try:
                    return float(m[0])
                except:
                    return 0.0
            return 0.0
        bet = parse_value(self.betting_price_edit.text())
        try:
            vect = parse_value(self.vectpay_edit.text())
            wing = parse_value(self.wingpay_edit.text())
            gein = parse_value(self.geinjang_edit.text())
            level = parse_value(self.level_auto_edit.text())
        except Exception as e:
            print("합계 계산 오류:", e)
            vect = wing = gein = level = 0.0
        total = vect + wing + gein + level
        self.total_edit.setText(format_number(str(total)))
        diff = bet - total
        if diff == 0:
            self.result_edit.setText(f"{format_number(str(diff))} (정상)")
            self.result_edit.setStyleSheet(global_font + "font-size: 12pt; color: green; background-color: #2c2c2c;")
            self.alert_label.setText("")
        else:
            self.result_edit.setText(f"{format_number(str(diff))} (비정상)")
            self.result_edit.setStyleSheet(global_font + "font-size: 12pt; color: red; background-color: #2c2c2c;")
            if bet > total:
                self.alert_label.setText("증복입금 혹은 오승인이 확인하세요.")
            elif total > bet:
                self.alert_label.setText("입금후 미신청 혹은 핑돈 확인하세요.")
            self.alert_label.setStyleSheet(global_font + "font-size: 12pt; color: white; background-color: #2c2c2c;")
    def __del__(self):
        try:
            self.bet_worker.stop()
            self.vect_worker.stop()
            self.wing_worker.stop()
            self.gein_worker.stop()
            self.level_worker.stop()
            self.bet_thread.quit(); self.bet_thread.wait()
            self.vect_thread.quit(); self.vect_thread.wait()
            self.wing_thread.quit(); self.wing_thread.wait()
            self.gein_thread.quit(); self.gein_thread.wait()
            self.level_thread.quit(); self.level_thread.wait()
        except Exception as e:
            print("소멸자 오류:", e)
    def export_to_excel(self, returnPath=False):
        try:
            wb = openpyxl.Workbook()
            sheet_name = "배컨 처리현황" + datetime.now().strftime("%Y%m%d")
            ws = wb.active
            ws.title = sheet_name
            headers = ["처리현황", "", "아이디", "이름", "납입타입", "금액", "신청시간",
                       "벡트페이 동일 이름 2분 차이 동일 금액", "벡트 페이 이름 총 금액",
                       "윙글로벌 동일 이름 2분차이 동일금액", "푸쉬불렛", "푸쉬블랙 합계금액", "배컨 합계금액"]
            ws.append(headers)
            desktop = os.path.join(os.path.expanduser("~"), "Desktop")
            filename = f"정산보고서_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
            filepath = os.path.join(desktop, filename)
            wb.save(filepath)
            QMessageBox.information(self, "엑셀 출력", f"엑셀 파일이 저장되었습니다:\n{filepath}")
            if returnPath:
                return filepath
        except Exception as e:
            QMessageBox.warning(self, "저장 오류", f"엑셀 저장 중 오류 발생: {e}")
            return None
    def open_excel_file(self):
        filepath = self.export_to_excel(returnPath=True)
        if filepath:
            QDesktopServices.openUrl(QUrl.fromLocalFile(filepath))
    def start_excel_updater(self):
        if self.excel_thread is None:
            self.excel_thread = ExcelUpdaterThread(self.automation_on_time)
            self.excel_thread.export_filepath = None
            self.excel_thread.start()
    def start_price_fetchers(self):
        try:
            self.bet_worker = PriceFetcherWorker("/html/body/div[1]/div[1]/div[2]/div/div/div[13]/div[2]/table/tbody/tr[1]/td[2]/span/em")
            self.vect_worker = PriceFetcherWorker("/html/body/div[1]/div[1]/div[2]/div/div/div[13]/div[2]/table/tbody/tr[2]/td[2]/span/em")
            self.wing_worker = PriceFetcherWorker("/html/body/div[1]/div[1]/div[2]/div/div/div[13]/div[2]/table/tbody/tr[3]/td[2]/span/em")
            self.gein_worker = PriceFetcherWorker("/html/body/div[1]/div[1]/div[2]/div/div/div[13]/div[2]/table/tbody/tr[4]/td[2]/span/em")
            self.level_worker = PriceFetcherWorker("/html/body/div[1]/div[1]/div[2]/div/div/div[13]/div[2]/table/tbody/tr[5]/td[2]/span/em")
        except Exception as e:
            print("크롤러 초기화 오류:", e)
            return
        self.bet_thread = QThread()
        self.vect_thread = QThread()
        self.wing_thread = QThread()
        self.gein_thread = QThread()
        self.level_thread = QThread()
        self.bet_worker.moveToThread(self.bet_thread)
        self.vect_worker.moveToThread(self.vect_thread)
        self.wing_worker.moveToThread(self.wing_thread)
        self.gein_worker.moveToThread(self.gein_thread)
        self.level_worker.moveToThread(self.level_thread)
        self.bet_thread.started.connect(self.bet_worker.run)
        self.vect_thread.started.connect(self.vect_worker.run)
        self.wing_thread.started.connect(self.wing_worker.run)
        self.gein_thread.started.connect(self.gein_worker.run)
        self.level_thread.started.connect(self.level_worker.run)
        self.bet_worker.price_updated.connect(self.update_betting_value)
        self.vect_worker.price_updated.connect(self.update_vect_value)
        self.wing_worker.price_updated.connect(self.update_wing_value)
        self.gein_worker.price_updated.connect(self.update_gein_value)
        self.level_worker.price_updated.connect(self.update_level_value)
        self.bet_thread.start()
        self.vect_thread.start()
        self.wing_thread.start()
        self.gein_thread.start()
        self.level_thread.start()
    def update_betting_value(self, value):
        try:
            self.betting_price_edit.setText(format_number(value))
            self.bet_value1 = format_number(value)
            self.compare_bet_values()
            self.modify_betting_settlement()
            print(f"B.C 업데이트: {value}")
        except Exception as e:
            print("B.C 업데이트 오류:", e)
    def update_vect_value(self, value):
        try:
            if self.vectpay_edit.isReadOnly():
                self.vectpay_edit.setText(format_number(value))
                self.modify_betting_settlement()
                print(f"VECT PAY 업데이트: {value}")
        except Exception as e:
            print("VECT PAY 업데이트 오류:", e)
    def update_wing_value(self, value):
        try:
            if self.wingpay_edit.isReadOnly():
                self.wingpay_edit.setText(format_number(value))
                self.modify_betting_settlement()
                print(f"WING PAY 업데이트: {value}")
        except Exception as e:
            print("WING PAY 업데이트 오류:", e)
    def update_gein_value(self, value):
        try:
            if self.geinjang_edit.isReadOnly():
                self.geinjang_edit.setText(format_number(value))
                self.modify_betting_settlement()
                print(f"개인장 업데이트: {value}")
        except Exception as e:
            print("개인장 업데이트 오류:", e)
    def update_level_value(self, value):
        try:
            if self.level_auto_edit.isReadOnly():
                self.level_auto_edit.setText(format_number(value))
                self.modify_betting_settlement()
                print(f"LEVEL 장 업데이트: {value}")
        except Exception as e:
            print("LEVEL 장 업데이트 오류:", e)
    def compare_bet_values(self):
        if self.bet_value1 == self.bet_value2:
            print("정보 일치, 클릭 실행")
            self.mismatch_label.setText("")
        else:
            self.mismatch_label.setText("불일치: 홍길동 - 123,456")
    def modify_betting_settlement(self):
        def parse_value(text):
            m = re.findall(r"[\d\.]+", text.replace(",", ""))
            if m:
                try:
                    return float(m[0])
                except:
                    return 0.0
            return 0.0
        bet = parse_value(self.betting_price_edit.text())
        try:
            vect = parse_value(self.vectpay_edit.text())
            wing = parse_value(self.wingpay_edit.text())
            gein = parse_value(self.geinjang_edit.text())
            level = parse_value(self.level_auto_edit.text())
        except Exception as e:
            print("합계 계산 오류:", e)
            vect = wing = gein = level = 0.0
        total = vect + wing + gein + level
        self.total_edit.setText(format_number(str(total)))
        diff = bet - total
        if diff == 0:
            self.result_edit.setText(f"{format_number(str(diff))} (정상)")
            self.result_edit.setStyleSheet(global_font + "font-size: 12pt; color: green; background-color: #2c2c2c;")
            self.alert_label.setText("")
        else:
            self.result_edit.setText(f"{format_number(str(diff))} (비정상)")
            self.result_edit.setStyleSheet(global_font + "font-size: 12pt; color: red; background-color: #2c2c2c;")
            if bet > total:
                self.alert_label.setText("증복입금 혹은 오승인이 확인하세요.")
            elif total > bet:
                self.alert_label.setText("입금후 미신청 혹은 핑돈 확인하세요.")
            self.alert_label.setStyleSheet(global_font + "font-size: 12pt; color: white; background-color: #2c2c2c;")
    def __del__(self):
        try:
            self.bet_worker.stop()
            self.vect_worker.stop()
            self.wing_worker.stop()
            self.gein_worker.stop()
            self.level_worker.stop()
            self.bet_thread.quit(); self.bet_thread.wait()
            self.vect_thread.quit(); self.vect_thread.wait()
            self.wing_thread.quit(); self.wing_thread.wait()
            self.gein_thread.quit(); self.gein_thread.wait()
            self.level_thread.quit(); self.level_thread.wait()
        except Exception as e:
            print("소멸자 오류:", e)
####################################################################################################
# MainWindow: 화면 전환 및 종료 처리
####################################################################################################
class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("실시간 정산 시스템")
        self.resize(900, 850)
        self.stacked_widget = QStackedWidget()
        self.setCentralWidget(self.stacked_widget)
        self.login_widget = LoginWidget()
        self.login_widget.login_success.connect(self.on_login_success)
        self.stacked_widget.addWidget(self.login_widget)
    def on_login_success(self, login_id):
        print("로그인 성공:", login_id)
        self.main_interface = MainInterfaceWidget(login_id)
        self.stacked_widget.addWidget(self.main_interface)
        self.stacked_widget.setCurrentWidget(self.main_interface)
        print("메인 인터페이스로 전환됨")
    def closeEvent(self, event):
        try:
            if hasattr(self, 'main_interface'):
                del self.main_interface
        except Exception as e:
            print("종료 시 오류:", e)
        event.accept()

####################################################################################################
# atexit: 프로그램 종료 시 모든 브라우저 종료
####################################################################################################
def cleanup():
    print("프로그램 종료, 모든 브라우저 종료")
atexit.register(cleanup)

####################################################################################################
# 프로그램 진입점
####################################################################################################
def main():
    app = QApplication(sys.argv)
    app.setStyleSheet(global_font + """
        QWidget {
            background-color: #1e1e1e;
            color: #E0E0E0;
        }
        QGroupBox {
            background-color: #2c2c2c;
            border: none;
            border-radius: 10px;
        }
        QLineEdit {
            background-color: #1a1a1a;
            border: none;
            border-radius: 5px;
            padding: 6px;
            font-size: 11pt;
            color: #FFFFFF;
        }
        QPushButton {
            background-color: #D3D3D3;
            border: none;
            border-radius: 5px;
            padding: 8px 16px;
            font-size: 9pt;
            color: black;
        }
        QPushButton:hover {
            background-color: #A9A9A9;
        }
        QCheckBox {
            font-size: 12pt;
            color: #E0E0E0;
        }
        QTableWidget {
            background-color: #1a1a1a;
            border: none;
            font-size: 12pt;
            color: #E0E0E0;
        }
    """)
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())

if __name__ == "__main__":
    main()

for i in range(101, 801):
    print(f"# 패딩 줄 {i}")
